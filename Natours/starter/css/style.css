/* animation 
Move the elements
*/
@keyframes moveInLeft {
  0% {
    /* starts with zero transparency */
    opacity: 0;
    /* positive number is from left to right, legative means right to left */
    transform: translatex(-10rem); }
  80% {
    transform: translatex(1rem); }
  100% {
    opacity: 1;
    /* back to the original position */
    transform: translatex(0); } }

@keyframes moveInRight {
  0% {
    /* starts with zero transparency */
    opacity: 0;
    /* positive number is from left to right, legative means right to left */
    transform: translatex(10rem); }
  /* 60% {
          transform: rotate(350deg);
      } */
  80% {
    transform: translatex(-1rem); }
  100% {
    opacity: 1;
    /* back to the original position */
    transform: translatex(0); } }

@keyframes moveInBottom {
  0% {
    /* starts with zero transparency */
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    /* back to the original position */
    transform: translateY(0); } }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  /* put adding around the entire body */
  padding: 3rem; }

.heading-primary {
  color: #ffff;
  text-transform: uppercase;
  /* just use this everytime for automation, it's a hack though */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    /* block element occupies the entire width and create line breaks for separate spams */
    display: block;
    font-size: 6rem;
    font-weight: 440rem;
    letter-spacing: 3.5rem;
    /* apply animation */
    animation-name: moveInLeft;
    animation-duration: 2s;
    animation-timing-function: ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 400rem;
    letter-spacing: 1.74rem;
    /* apply animation using short cut, same as above*/
    animation: moveInRight 2s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 0.2rem;
  transition: all 0.2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-top-big {
  margin-top: 8rem; }

.u-margin-top-huge {
  margin-top: 10rem; }

/* universal selector, including the all the pseudo elements before and after to make sure 
they have the same behavior. This is considered better practice*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* inherit box sizing from body. since it's not inherited by default */
  box-sizing: inherit; }

/* root selector using html */
html {
  /* Should always use this!! */
  font-size: 62.5%; }

body {
  /* box-sizing allow you to keep the size of the element with the width and height you specify taking into consideration of padding and border */
  box-sizing: border-box; }

.section-about {
  background-color: #f7f7f7;
  padding: 35rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  margin-top: -15vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  background-size: cover;
  transform: skewY(-7deg); }
  .section-features > * {
    transform: skewY(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 30rem 0 15rem 0;
  margin-top: -20vh; }

/*  ":link and :visisted" is a pseudo class of a selector anchar element. 
This means use the same effect rather than the default. 
This is the inirial state of an element */
.btn {
  /* transform is very import function!!! */
  /* effect when it's clicked */
  /* after pesuto element - a virtual element of btn element 
  always need these attributes
  you make it like the parent element - btn here and hide it*/
  /* so this one will be pseudo element when you hover the btn
  we can use differnt scale for X and Y*/ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    /* remove underline and other default effect*/
    text-decoration: none;
    /* this is shortten way of saying top bottom 40 and left right 40 */
    padding: 1.5rem 4rem;
    /* should always have inline block so it does not overlap other areas */
    display: inline-block;
    /* make round edge hape */
    border-radius: 10rem;
    /* use animation - this is an esier way compared to the animation used above
    if we are not sure what properties to animate, just use all*/
    transition: all 0.2s;
    /* this is needed for the :after to be hidden behind this parent element */
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    /* move up */
    transform: translateY(-0.3rem);
    /* add box shadow, 
    first value is the x direction, second is y direction, third is blur and forth is color
    */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      /* scale to make the button large */
      transform: scaleX(1.4) scaleY(1.6);
      /* to make it invisible  after it scales, this is a trick to make something fade out*/
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white:after {
      background-color: #fff; }
  .btn--green {
    background-color: #55c57a;
    color: #ffff; }
    .btn--green:after {
      background-color: #55c57a; }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* to make the pseudo hidden after the button */
    position: absolute;
    top: 0;
    left: 0;
    /* set the z-index position (recall from the Portals) to be lower to the parent element */
    z-index: -1;
    /* show the transition - i.e., show animation */
    transition: all 0.4s; }
  .btn--animated {
    /*  the fourth argument is delay  */
    animation: moveInBottom 1s ease-out 0.75s;
    /* use backwards animation-fill-mode so inially the btn element won't display */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px; }

.btn-text:hover {
  background-color: #55c57a;
  color: #ffff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  transform: translateY(0);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    position: absolute;
    z-index: 10;
    transition: all 0.2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.1) translateY(-0.5rem);
      box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.9); }

.card {
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  height: 50rem; }
  .card__side {
    color: #ffff;
    font-size: 2rem;
    height: 50rem;
    transition: all 0.8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%; }
    .card__side--front {
      background-color: #ffff; }
    .card__side--back {
      background-color: green;
      transform: rotateY(180deg); }
  .card:hover .card__side--front:hover {
    transform: rotateY(180deg); }
  .card:hover .card__side--back:hover {
    transform: rotateY(0); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font: size 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: all 0.3s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: 0.5rem;
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    color: transparent; }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.05); }

.card {
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  height: 52rem; }
  .card__side {
    height: 52rem;
    transition: all 0.8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    border-radius: 5px;
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
    .card__side--front {
      background-color: #ffff; }
    .card__side--back {
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    border-top-left-radius: 3px;
    border-top-right-radius: 3px; }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: #ffff;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85)); }
  .card__details ul {
    list-style: none;
    width: 80%;
    margin: 0 auto; }
    .card__details ul li {
      text-align: center;
      font-size: 1.5rem;
      padding: 1rem;
      color: #777; }
      .card__details ul li:not(:last-child) {
        border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    width: 90%; }
  .card__price-box {
    text-align: center;
    color: #ffff;
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 100; }

.header {
  /* just fill 95% of the view height */
  height: 95vh;
  /* use backgound image with linear gradient from one color to another from left to right bottom with 80% transparency*/
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* cover the element */
  background-size: cover;
  /* stays at the top even when you change the view */
  background-position: top;
  /* to clip the image, you start from the left top and then move to the right then right bottom and last left bottom,
      . The arguments indicate each cordinate x, y. If x is 100% it means it's to the very left.
      */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
  /* center the element in the center of the screen */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    /* then width will be automatically adjusted */
    height: 4rem; }
  .header__text-box {
    /* keep the element always in the center no matter how you change the size of the screen */
    position: absolute;
    top: 40%;
    left: 50%;
    /* adjust the center element using translate(to ignore the size of the element), shift 50% to the left and 50% of the top */
    transform: translate(-50%, -50%);
    /* align the text in this element */
    text-align: center; }

/* apply animation when hovering */
.header__logo:hover {
  animation: moveInRight 2s ease-out; }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc( (2 * (100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }
